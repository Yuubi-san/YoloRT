--- winrt/base.h
+++ patched/base.h
@@ -27,8 +27,12 @@
 
 #if __has_include(<WindowsNumerics.impl.h>)
 #define WINRT_IMPL_NUMERICS
+#if __has_include(<directxmath.h>)
+// mingw 6.0.0 headers don't have this and it *seems* unused in winrt, but
+// leaving it in just in case:
 #include <directxmath.h>
 #endif
+#endif
 
 #ifdef __cpp_lib_coroutine
 
@@ -43,7 +47,7 @@
     using suspend_never = std::suspend_never;
 }
 
-#else
+#elif __has_include(<experimental/coroutine>)
 
 #include <experimental/coroutine>
 
@@ -56,6 +60,19 @@
     using suspend_never = std::experimental::suspend_never;
 }
 
+#else
+
+#include <winrt/yolort_impl/corostub.hpp>
+
+namespace winrt::impl
+{
+    template <typename T = void>
+    using coroutine_handle = corostub::coroutine_handle<T>;
+
+    using suspend_always = corostub::suspend_always;
+    using suspend_never = corostub::suspend_never;
+}
+
 #endif
 
 #ifdef _DEBUG
@@ -355,6 +372,7 @@
 __declspec(selectany) void(__stdcall* winrt_resume_handler)(void const* token) noexcept {};
 __declspec(selectany) int32_t(__stdcall* winrt_activation_handler)(void* classId, winrt::guid const& iid, void** factory) noexcept {};
 
+namespace winrt {
 extern "C"
 {
     void* __stdcall WINRT_IMPL_LoadLibraryW(wchar_t const* name) noexcept;
@@ -431,6 +449,7 @@
     int32_t __stdcall WINRT_CanUnloadNow() noexcept;
     int32_t __stdcall WINRT_GetActivationFactory(void* classId, void** factory) noexcept;
 }
+}  // namespace winrt
 
 #ifdef _M_HYBRID
 #define WINRT_IMPL_LINK(function, count) __pragma(comment(linker, "/alternatename:#WINRT_IMPL_" #function "@" #count "=#" #function "@" #count))
@@ -2751,7 +2770,7 @@
         }
 
         auto header = precreate_hstring_on_heap(length);
-        memcpy_s(header->buffer, sizeof(wchar_t) * length, value, sizeof(wchar_t) * length);
+        yolort::memcpy(header->buffer, sizeof(wchar_t) * length, value, sizeof(wchar_t) * length);
         return header;
     }
 
@@ -3102,6 +3121,12 @@
         {
             return reinterpret_cast<R const&>(object);
         }
+
+        template <typename R>
+        operator R () const noexcept
+        {
+            return static_cast<R const&>(*this);
+        }
     };
 
     template <typename T>
@@ -3459,8 +3484,8 @@
             return{};
         }
         hstring_builder text(size);
-        memcpy_s(text.data(), left.size() * sizeof(wchar_t), left.data(), left.size() * sizeof(wchar_t));
-        memcpy_s(text.data() + left.size(), right.size() * sizeof(wchar_t), right.data(), right.size() * sizeof(wchar_t));
+        yolort::memcpy(text.data(), left.size() * sizeof(wchar_t), left.data(), left.size() * sizeof(wchar_t));
+        yolort::memcpy(text.data() + left.size(), right.size() * sizeof(wchar_t), right.data(), right.size() * sizeof(wchar_t));
         return text.to_hstring();
     }
 }
@@ -8112,7 +8137,9 @@
 
         static time_point from_time_t(time_t time) noexcept
         {
-            return from_sys(std::chrono::system_clock::from_time_t(time));
+            return std::chrono::time_point_cast<time_point::duration>(
+                   from_sys(std::chrono::system_clock::from_time_t(time))
+            );
         }
 
         static file_time to_file_time(time_point const& time) noexcept
@@ -8392,7 +8419,7 @@
             coroutine_handle<> m_handle;
         };
         auto state = std::make_unique<threadpool_resume>(context, handle);
-        submit_threadpool_callback([](void*, void* p)
+        submit_threadpool_callback([](void*, void* p) __stdcall
             {
                 std::unique_ptr<threadpool_resume> state{ static_cast<threadpool_resume*>(p) };
                 resume_apartment_sync(state->m_context, state->m_handle);
@@ -8949,8 +8976,10 @@
 
 #ifdef __cpp_lib_coroutine
 namespace std
-#else
+#elif __has_include(<experimental/coroutine>)
 namespace std::experimental
+#else
+namespace corostub
 #endif
 {
     template <typename... Args>
